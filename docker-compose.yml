services:
  db:
    image: postgres:16-alpine
    container_name: db
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: apppass
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser -d appdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  api:
    build:
      context: ./API
      dockerfile: Dockerfile
    container_name: api
    environment:
      ASPNETCORE_URLS: http://+:5000
      ConnectionStrings__DefaultConnection: Host=db;Port=5432;Database=appdb;Username=appuser;Password=apppass
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:5000"
    networks:
      - app-net
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:5000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  web:
    build:
      context: ./front-produtos
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_BASE: http://localhost:8080   # bundle do browser
    container_name: web
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_BASE: http://localhost:8080     # browser
      API_BASE_INTERNAL: http://api:5000              # SSR/rotas API
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "3000:3000"
    networks:
      - app-net
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:3000/api/health || curl -fsS http://localhost:3000 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

networks:
  app-net: {}

volumes:
  db_data: {}
